{"version":3,"sources":["youtube.js"],"names":["loader","document","querySelector","errorMsg","getElementById","linksDad","deleteButton","style","display","hideLoader","showErrorMsg","errMessage","addEventListener","showAllUrls","isYoutube","AllUrls","img","title","acc","linkHtml","concat","e","url","quality","type","attr","innerHTML","linksHtml","downloadButton","link","linkInput","value","trim","includes","data","body","fetch","method","response","then","Content-Type","JSON","stringify","console","json","allUrls","log","hosting","thumb","meta","id","err","showLoader"],"mappings":"aACA,IAAMA,OAASC,SAASC,cAAc,WADtCC,SAAAF,SAAAG,eAAA,iBACMJ,UAASC,SAASC,cAAc,gBAGhCG,SAAWJ,SAASC,cAAc,aAFlCC,eAAmBF,SAACG,cAAe,aAInCE,aAAeL,SAASG,eAAe,UAFvCC,WAAWJ,WAMbD,OAAOO,MAAMC,QAAU,SAF3BC,WAAA,WAOIT,OAAOO,MAAMC,QAAU,QAIrBE,aAAe,SAACC,GALtBR,SAAMM,YAAaE,EAAnBR,SAIAI,MAAAC,QAAA,QAOCL,SAASS,iBAAiB,eAAgB,WAAA,OAAOT,SAASI,MAAMC,QAAU,UAIrEK,YAAc,SAACC,EAAWC,EAASC,EAAKC,GAJ7Cd,GAAAA,EAAAA,CAIKU,IAAAA,EAAcE,EAAdF,OAAAA,SAAcK,EAACJ,GACjB,IAAAK,EAAA,GAQA,MALiB,QAAbT,EAAAA,KACAS,EAAA,iDAAAC,OAUMC,EAAEC,IAVR,8CAAAF,OAUwDC,EAAEE,QAV1D,MAAAH,OAUsEC,EAAEG,KAVxE,gEAcsB,eAAXH,EAAEG,OAPPA,EAAS,iDAAAJ,OAORC,EAAKC,IAPG,8CAAAF,OAOqBC,EAAAE,QAPrB,UAAAH,OAOqBC,EAAAI,KAAA,MAPrB,iEAkBnBP,EAAAC,GAFG,IAGHd,SAASqB,UAAT,uBAAAN,OACgBJ,EADhB,gLAAAI,OAWAH,EAXA,iCAAAG,OAKMO,EALN,eAnCuCjB,aAAgBH,8CA6C3DqB,eAAehB,iBAAiB,QAAS,WAUrC,IAAUiB,EAAGC,UAAAC,MAAAC,OAAb,GAAAH,EAAAI,SAAA,eAAAA,SAAA,aAAA,CAIa,IAF8BC,EAAA,CAAAZ,IAAAO,GAGvCM,aAHJC,MAKM,oCAAQ,CAAAC,OAAIC,OACjBC,QAAK,CAAAC,eAAQ,oBACVL,KAAAM,KAAAC,UAAAR,KAEAS,KAAAA,SAAAA,GAAYT,OAAZI,EAAAM,SACA/B,KAAAA,SAAAA,GAGA,IAAAgC,EAAAX,EAAAZ,IACAZ,QAAYoC,IAACZ,GAdjBrB,YAgBSqB,EAAAa,QAAMF,EAAAX,EAAAc,MAAAd,EAAAe,KAAAhC,MAAAiB,EAAAgB,MAhBf,MAAA,SAAAC,GAcIzC,aAAa,+CAdjB,QAuBA,WACAoB,oBAzBAsB,aAAU,8BAuBd9C,aAAaM,iBAAiB,QAAS,WAEnCkB,UAAUC,MAAQ,GAClB1B,SAASqB,UAAY","file":"youtube.min.js","sourcesContent":["// Get all necessary elements from the DOM\r\nconst loader = document.querySelector(\"#loader\"); // Loader Span\r\nconst errorMsg = document.getElementById(\"error-message\"); // Error Massage\r\nconst linkInput = document.querySelector(\".linkOfVideo\"); // Link Input Area\r\nconst linksDad = document.querySelector(\".LinksDad\"); // Videos Result Area\r\nconst downloadButton = document.querySelector(\".download\"); // Download Button\r\nconst deleteButton = document.getElementById(\"delete\"); // Delete Button\r\n\r\n// Function to show the loader element\r\nconst showLoader = () => {\r\n    loader.style.display = \"block\";\r\n};\r\n\r\n// Function to hide the loader element\r\nconst hideLoader = () => {\r\n    loader.style.display = \"none\";\r\n};\r\n\r\n// Function to show an error message with the given text\r\nconst showErrorMsg = (errMessage) => {\r\n\t// Set the error message text content\r\n\terrorMsg.textContent = errMessage;\r\n\t// Show the error message element\r\n\terrorMsg.style.display = \"block\";\r\n\t// Listen to the animationend event on the error message element, then hide it\r\n\terrorMsg.addEventListener(\"animationend\", () => (errorMsg.style.display = \"none\"));\r\n}\r\n\r\n// Define a function to display all the URLs of a given Youtube video\r\nconst showAllUrls = (isYoutube, AllUrls, img, title) => {\r\n    // If the URL is not from Youtube, show an error message and return\r\n\t\r\n    if (!isYoutube) {\r\n        showErrorMsg(\"An error occurred, please try again later\");\r\n        return;\r\n    }\r\n\r\n    // Loop through all the URLs and generate HTML code for each one\r\n    const linksHtml = AllUrls.reduce((acc, e) => {\r\n        let linkHtml = \"\";\r\n        // If Type Is MP4\r\n        if (e.type === \"mp4\") {\r\n            linkHtml = `\r\n\t\t\t<div class=\"linkUrl\">\r\n\t\t\t<a href=\"${e.url}\" class=\"Link\" id=\"video\" target=\"_blank\">${e.quality}p ${e.type} <i class=\"fa-solid fa-video\"></i></a>\r\n\t\t\t</div>\r\n\t\t\t`;\r\n            // IF Type Is MP3\r\n        } else if (e.type === \"opus audio\") {\r\n            linkHtml = `\r\n\t\t\t<div class=\"linkUrl\">\r\n\t\t\t<a href=\"${e.url}\" class=\"Link\" id=\"audio\" target=\"_blank\">${e.quality}p mp3 ${e.attr.class} <i class=\"fa-solid fa-music\"></i></a>\r\n\t\t\t</div>\r\n\t\t\t`;\r\n            \r\n        } \r\n        return acc + linkHtml;\r\n    }, \"\");\r\n\r\n    // Generate HTML code for the video thumbnail, title, and all the URLs\r\n    linksDad.innerHTML = `\r\n        <img src=\"${img}\" alt=\"\" style=\"width: 70%; margin: auto 50%; border-radius: 20px;\">\r\n        <br>\r\n        <h1 style=\"text-align: center; color: #000; font-size: 29px; margin: 1em auto;\">${title}</h1>\r\n        <br>\r\n        ${linksHtml}\r\n    `;\r\n};\r\n\r\n// Attach a click event listener to the download button\r\ndownloadButton.addEventListener(\"click\", () => {\r\n    // Get the video URL from the input field\r\n    const link = linkInput.value.trim();\r\n    // If the input field is empty, show an error message and return\r\n    if (!link.includes(\"youtube.com\").includes(\"youtu.be)\")) { \r\n        showErrorMsg(\"Please enter a video URL\");\r\n        return;\r\n    }\r\n\r\n    // Send a POST request to the save-from.net API to get all the URLs of the video\r\n    const data = { \"url\": link };\r\n    showLoader();\r\n    fetch(\"https://save-from.net/api/convert\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(data)\r\n    })\r\n    .then(response => response.json())\r\n    .then(data => {\r\n        // When the response is received, display all the URLs\r\n        const allUrls = data.url;\r\n        console.log(data);\r\n        showAllUrls(data.hosting, allUrls, data.thumb, data.meta.title, data.id);\r\n    })\r\n    .catch(err => {\r\n        // If there's an error, show an error message\r\n        showErrorMsg(\"An error occurred, please try again later\");\r\n    })\r\n    .finally(() => {\r\n        hideLoader();\r\n    });\r\n});\r\n\r\n// Attach a click event listener to the delete button\r\ndeleteButton.addEventListener(\"click\", () => {\r\n    // Clear the input field and the URL display area\r\n    linkInput.value = \"\"; // URL Input Area\r\n    linksDad.innerHTML = \"\"; // LInksDad Area\r\n});"]}
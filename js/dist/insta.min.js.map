{"version":3,"sources":["insta.js"],"names":["loader","document","querySelector","errorMsg","getElementById","linksDad","deleteButton","style","display","hideLoader","showErrorMsg","errMessage","addEventListener","showAllUrls","isInstagram","AllUrls","img","title","linksHtml","reduce","acc","e","concat","url","type","linkHtml","quality","attr","includes","downloadButton","innerHTML","showLoader","method","link","linkInput","value","trim","data","console","headers","Content-Type","body","JSON","stringify","then","response","json","allUrls","log","thumb","meta","id","err"],"mappings":"aACA,IAAMA,OAASC,SAASC,cAAc,WADtCC,SAAAF,SAAAG,eAAA,iBACMJ,UAASC,SAASC,cAAc,gBAGhCG,SAAWJ,SAASC,cAAc,aAFlCC,eAAmBF,SAACG,cAAe,aAInCE,aAAeL,SAASG,eAAe,UAFvCC,WAAWJ,WAMbD,OAAOO,MAAMC,QAAU,SAF3BC,WAAA,WAOIT,OAAOO,MAAMC,QAAU,QAIrBE,aAAe,SAACC,GALtBR,SAAMM,YAAaE,EAAnBR,SAIAI,MAAAC,QAAA,QAOCL,SAASS,iBAAiB,eAAgB,WAAA,OAAOT,SAASI,MAAMC,QAAU,UAIrEK,YAAc,SAACC,EAAaC,EAASC,EAAKC,GAE5C,GAAoB,kBAAhBH,EAAJ,CAMA,IAAMI,EAAYH,EAAQI,OAAO,SAACC,EAAKC,GARrCR,IAAAA,EAAc,GAkCZ,MAhCgB,QAAhBC,EAAAA,KACAJ,EAAa,iDAAAY,OAIjBD,EAAAE,IAJiB,2DAAAD,OAIjBD,EAAAG,KAJiB,gEAOb,eADeH,EAAfG,KAUIC,EAAQ,iDAAAH,OAPAD,EAAAE,IAOA,8CAAAD,OAPAD,EAAAK,QAOA,SAAAJ,OAPAD,EAAAM,KAAA,MAOA,gEAOA,CAAA,MAAA,OAAA,MAAA,OAAA,OAAAC,SAAAP,EAAAG,QAOXC,EAAA,iDAAAH,OACSD,EAAAL,IADT,uBAAAM,OAILD,EAAAE,IAJK,gFAAAD,OAILD,EAAAG,KAJK,2CACMJ,EAAMK,GAcrBI,IAVIxB,SAASyB,UAAT,uBAAAR,OAcKN,EAdL,gLAAAM,OAgBIL,EAhBJ,iCAAAK,OAKMJ,EALN,eA1CHf,aAASS,8CA+DNmB,eAAUnB,iBAAA,QAAA,WAENoB,IAAMC,EAAEC,UAD+BC,MAAAC,OAE5B,GAAAH,EAAAL,SAAgB,iBAAhB,CAKX,IAAAS,EAAA,CAAAd,IAAAU,GACAF,aACAO,MAAAA,oCAAA,CACAzB,OAAYwB,OAVhBE,QAYO,CAAAC,eAAO,oBACVC,KAAAC,KAAAC,UAAAN,KAbJO,KAAA,SAAAC,GAgBS,OAAAA,EAAMC,SACXrC,KAAAA,SAAAA,GAIR,IAAAsC,EAAAV,EAAAd,IAZQe,QAAQU,IAAIX,GAapB/B,YAAaM,EAAAA,QAAiBmC,EAASV,EAAAY,MAAMZ,EAAAa,KAAAjC,MAAAoB,EAAAc,MAbrCb,MAeK,SAAAc,GACT/C,aAAA,+CAhBIiC,QAOK,WACL7B,oBAjBuCC,aAAA,8BAsB/CJ,aAAaM,iBAAiB,QAAS,WAEnCsB,UAAUC,MAAQ,GAClB9B,SAASyB,UAAY","file":"insta.min.js","sourcesContent":["// Get all necessary elements from the DOM\r\nconst loader = document.querySelector(\"#loader\"); // Loader Span\r\nconst errorMsg = document.getElementById(\"error-message\"); // Error Massage\r\nconst linkInput = document.querySelector(\".linkOfVideo\"); // Link Input Area\r\nconst linksDad = document.querySelector(\".LinksDad\"); // Videos Result Area\r\nconst downloadButton = document.querySelector(\".download\"); // Download Button\r\nconst deleteButton = document.getElementById(\"delete\"); // Delete Button\r\n\r\n// Function to show the loader element\r\nconst showLoader = () => {\r\n    loader.style.display = \"block\";\r\n};\r\n\r\n// Function to hide the loader element\r\nconst hideLoader = () => {\r\n    loader.style.display = \"none\";\r\n};\r\n\r\n// Function to show an error message with the given text\r\nconst showErrorMsg = (errMessage) => {\r\n\t// Set the error message text content\r\n\terrorMsg.textContent = errMessage;\r\n\t// Show the error message element\r\n\terrorMsg.style.display = \"block\";\r\n\t// Listen to the animationend event on the error message element, then hide it\r\n\terrorMsg.addEventListener(\"animationend\", () => (errorMsg.style.display = \"none\"));\r\n}\r\n\r\n// Define a function to display all the URLs of a given Instagram video\r\nconst showAllUrls = (isInstagram, AllUrls, img, title) => {\r\n    // If the URL is not from Instagram, show an error message and return\r\n    if (isInstagram !== \"instagram.com\") {\r\n        showErrorMsg(\"An error occurred, please try again later\");\r\n        return;\r\n    }\r\n\r\n    // Loop through all the URLs and generate HTML code for each one\r\n    const linksHtml = AllUrls.reduce((acc, e) => {\r\n        let linkHtml = \"\";\r\n        // If Type Is MP4\r\n        if (e.type === \"mp4\") {\r\n            linkHtml = `\r\n\t\t\t<div class=\"linkUrl\">\r\n\t\t\t<a href=\"${e.url}\" class=\"Link\" id=\"video\" target=\"_blank\">High Quality ${e.type} <i class=\"fa-solid fa-video\"></i></a>\r\n\t\t\t</div>\r\n\t\t\t`;\r\n            // IF Type Is MP3\r\n        } else if (e.type === \"opus audio\") {\r\n            linkHtml = `\r\n\t\t\t<div class=\"linkUrl\">\r\n\t\t\t<a href=\"${e.url}\" class=\"Link\" id=\"audio\" target=\"_blank\">${e.quality} mp3 ${e.attr.class} <i class=\"fa-solid fa-music\"></i></a>\r\n\t\t\t</div>\r\n\t\t\t`;\r\n            // IF Type Is Photo\r\n        } else if ([\"jpg\", \"jpeg\", \"png\", \"webp\", \"gif\"].includes(e.type)) {\r\n            linkHtml = `\r\n\t\t\t<div class=\"linkUrl\">\r\n\t\t\t<a href=\"${e.img}\">\r\n\t\t\t<a href=\"${e.url}\" class=\"Link\" id=\"audio\" target=\"_blank\"><i class=\"fa-solid fa-image\"></i> ${e.type}</a>\r\n\t\t\t</a>\r\n\t\t\t</div>\r\n\t\t\t`;\r\n        }\r\n        return acc + linkHtml;\r\n    }, \"\");\r\n\r\n    // Generate HTML code for the video thumbnail, title, and all the URLs\r\n    linksDad.innerHTML = `\r\n        <img src=\"${img}\" alt=\"\" style=\"width: 70%; margin: auto 50%; border-radius: 20px;\">\r\n        <br>\r\n        <h1 style=\"text-align: center; color: #000; font-size: 29px; margin: 1em auto;\">${title}</h1>\r\n        <br>\r\n        ${linksHtml}\r\n    `;\r\n};\r\n\r\n// Attach a click event listener to the download button\r\ndownloadButton.addEventListener(\"click\", () => {\r\n    // Get the video URL from the input field\r\n    const link = linkInput.value.trim();\r\n    // If the input field is empty, show an error message and return\r\n    if (!link.includes(\"instagram.com\")) {\r\n        showErrorMsg(\"Please enter a video URL\");\r\n        return;\r\n    }\r\n\r\n    // Send a POST request to the save-from.net API to get all the URLs of the video\r\n    const data = { \"url\": link };\r\n    showLoader();\r\n    fetch(\"https://save-from.net/api/convert\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(data)\r\n    })\r\n    .then(response => response.json())\r\n    .then(data => {\r\n        // When the response is received, display all the URLs\r\n        const allUrls = data.url;\r\n        console.log(data);\r\n        showAllUrls(data.hosting, allUrls, data.thumb, data.meta.title, data.id);\r\n    })\r\n    .catch(err => {\r\n        // If there's an error, show an error message\r\n        showErrorMsg(\"An error occurred, please try again later\");\r\n    })\r\n    .finally(() => {\r\n        hideLoader();\r\n    });\r\n});\r\n\r\n// Attach a click event listener to the delete button\r\ndeleteButton.addEventListener(\"click\", () => {\r\n    // Clear the input field and the URL display area\r\n    linkInput.value = \"\"; // URL Input Area\r\n    linksDad.innerHTML = \"\"; // LInksDad Area\r\n});"]}